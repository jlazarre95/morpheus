import { env } from "process";
import { createDoubleStarComment } from "../../../../util/string.util";
import { Stringifyable } from "../../../../types/stringifyable";

import { LoadRunner } from "../load-runner.constants";
import { LrEndTransaction } from "./lr-end-transaction";
import { LrRequestGroup } from "./lr-request-group";
import { LrScriptElement } from "./lr-script-element";
import { LrStartTransaction } from "./lr-start-transaction";

export interface LrActionFileOptions {
    scriptName?: string;
    simulationArgs?: string;
    runId?: string;
    timeGenerated?: Date;
    // creator?: ScriptGenerationCreator;
}

export class LrActionFile implements Stringifyable {
    private scriptName: string;
    private simulationArgs: string;
    private runId: string;
    private timeGenerated: Date;
    private creatorName: string;
    private creatorEmail: string;

    private elements: LrScriptElement[] = [];
    private requestGroups: LrRequestGroup[] = [];
    private transactions: string[] = [];
    private transactionsSet: Set<string> = new Set<string>();

    constructor(options: LrActionFileOptions) {
        this.scriptName = options.scriptName || "<unknown>";
        this.simulationArgs = options.simulationArgs || "<none>";
        this.runId = options.runId || "<unknown>";
        this.timeGenerated = options.timeGenerated || new Date();
        this.creatorName = "<unknown>";
        this.creatorEmail = "";
        // this.creatorName = options.creator ? options.creator.name : "<unknown>";
        // this.creatorEmail = options.creator && options.creator.email ? `<${options.creator.email}>` : "";
    }

    addStartTransaction(name: string) {
        const t: LrStartTransaction = new LrStartTransaction(name);
        this.elements.push(t);
        if(!this.transactionsSet.has(name)) {
            this.transactions.push(name);
            this.transactionsSet.add(name);
        }
    }

    isStartTransactionAdded(): boolean {
        return this.transactions.length >= 1;
    }

    addEndTransaction(name: string) {
        const t: LrEndTransaction = new LrEndTransaction(name);
        this.elements.push(t);
    }

    addRequestGroup(requestGroup: LrRequestGroup) {
        this.requestGroups.push(requestGroup);
        this.elements.push(requestGroup);
    }

    getLastRequestGroup(): LrRequestGroup | undefined {
        return this.requestGroups.length >= 1 ? this.requestGroups[this.requestGroups.length - 1] : undefined;
    }

    addElement(element: LrScriptElement) {
        this.elements.push(element);
    }

    toString(): string {
        let comment: string = `SCRIPT AUTO-GENERATED BY MORPHEUS (Script Generator version: ${env["npm_package_version"]})\n\n`
            + `Flow: ${this.scriptName}\n`
            + `Applications: UltiPro\n`
            + `Environments: CALENDAR\n`
            + `Description: As an employee, view the latest paycheck\n\n`
            + `Simulation arguments: ${this.simulationArgs}\n`
            + `Recorded transactions: ${this.transactions.reduce((prev, curr) => `${prev}, ${curr}`)}\n\n`
            + `Script type: ${LoadRunner.SCRIPT_TYPE} (${LoadRunner.PROG_LANG})\n`
            + `VuGen compatibility: ${LoadRunner.VUGEN_COMPATIBILITY}\n\n`
            + `Run ID: ${this.runId}\n`
            + `Generated by: ${this.creatorName} ${this.creatorEmail}\n`
            + `Generated on: ${this.timeGenerated.toUTCString()}`;

        let str: string = createDoubleStarComment(comment) + "\n"
            + `Action()\n`
            + `{\n\n`
            + `\tweb_set_sockets_option("SSL_VERSION", "TLS1.2");\n`
            + `\tweb_set_max_html_param_len("100000");\n\n`
        for(const elem of this.elements) {
            str += elem.toString();
        }
        str += "\treturn 0;\n\n}";
        return str;
    }
}